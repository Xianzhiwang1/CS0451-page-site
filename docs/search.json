[
  {
    "objectID": "posts/my-blog-post-04-linear-regress/index.html",
    "href": "posts/my-blog-post-04-linear-regress/index.html",
    "title": "Linear Regression",
    "section": "",
    "text": "Introduction\nIn this blog post I am going to discuss Linear Regression.\nBefore we start the implementation, we first record the following code snippet that will help us to automatically load our source code when we are in the editing phase.\n\n%load_ext autoreload\n%autoreload 2\n\nFirst, let’s import some libraries, then we perform our fit_gradient and fit_analytic on the following simple data set with only one features to visualize our linear regression.\n\nimport numpy as np\nnp.random.seed(42)\nfrom matplotlib import pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (12,6)\nplt.rcParams['figure.dpi'] = 78 \nplt.rcParams['savefig.dpi'] = 156 \nfrom linear_regression import LinearRegression \n\n\n\nFitting Linear Regression using gradient descent; a.k.a. fit_gradient\nIn fit_gradient, the key step is to compute the gradient using a descent algorithm so that we could solve the following problem: \\[ \\hat{w} = \\arg \\min_{w} L(w). \\] Equivalently, we could unpact this equation: \\[ \\hat{w} = \\sum_{i=1}^{n} \\ell(\\hat{y}_i, y_i) = \\argmin_{w} \\sum_{i=1}^{n} ( \\langle w, x_i \\rangle - y_i)^2.\\] Recall that our loss function is of the form $ (, y) = (-y)^2 $ since we are using ordinary least square regression.\nWe start by taking derivative with respect to \\(w.\\) Using chain rule for matrices, we obtain the following expression: \\[ \\nabla L(w) = 2 X^{T}(X\\cdot w -y).\\] Then, we use gradient descent to find the \\(w\\) that is “good enough.” We achieve this by the following iteration: \\[ w^{(t+1)} \\leftarrow w^{(t)} - 2 \\cdot \\alpha \\cdot X^{T} (X \\cdot w^{(t)} - y).\\]\n\n# We start by generate a small data set.\nw0 = -0.5\nw1 =  0.7\n\nn = 100\nx = np.random.rand(n, 1)\ny = w1*x + w0 + 0.1*np.random.randn(n, 1)\n\nplt.scatter(x, y)\nlabels = plt.gca().set(xlabel = \"Feature (x)\", ylabel = \"Target (y)\")\n\n\n\n\nWe are able to generate data and visualize this problem when p_features = 1. Graphically, we are trying to draw a line “of best fit” through the data points in the sense of OLS, which stands for Ordinary Least Squares. The line we draw just means given the feature x, we find the corresponding predicted y using the line, which will be close to the original y, if we have done a good job.\nAfter importing linear_regression.py, we could call the fit_gradient method that implements the gradient descent algorithm for us, as illustrated in the above cell. In the following cell, we plot the “line of best fit” using the weights LR1.w that we obtained after running fit_gradient.\n\nLR1 = LinearRegression()\nX_ = LR1.pad(x)\nLR1.fit_gradient(X_, y, alpha=0.0001, max_epochs=1e4)\nplt.scatter(x, y)\nplt.plot(x, X_@LR1.w, color = \"black\")\nlabels = plt.gca().set(xlabel = \"Feature (x)\", ylabel = \"Target (y)\")\nprint(LR1.w)\n\n[[ 0.62865065]\n [-0.46565231]]\n\n\n\n\n\n\n\nFitting Linear Regression using a analytic formula; a.k.a. fit_analytic\nSimilarly to fit_gradient, we also have a method called fit_analytic, which uses a formula to compute the weights w exactly, and this is implemented using the followiing equation: \\[ \\hat{w} = (X^T X)^{-1} X^T y, \\] where \\(\\hat{w}\\) denotes the weights we obtained after calling the function fit_analytic. Note that in order for this formula to make sense, we need X to be a invertible matrix. Now, with the math part out of the way, let’s see this in action using the following code:\n\nLR = LinearRegression()\nX_ = LR.pad(x)\nLR.fit_analytic(X_,y)\nplt.scatter(x, y)\nplt.plot(x, X_@LR.w, color = \"black\")\nlabels = plt.gca().set(xlabel = \"Feature (x)\", ylabel = \"Target (y)\")\n\n\n\n\n\n\nMore than one feature\nNow we use the following function to create both testing and validation data. At this stage, we could experiment with more features.\nWhen the number of features is one, p_features = 1, we could plot the artificial training data set and the validation data set. We lose this luxury when we have 2 or more features.\n\nn_train = 100\nn_val = 100\np_features = 1 \nnoise = 0.2\n\n# create some data\nLR = LinearRegression()\nX_train, y_train, X_val, y_val = LR.LR_data(n_train, n_val, p_features, noise)\n\n# plot it\nfig, axarr = plt.subplots(1, 2, sharex = True, sharey = True)\naxarr[0].scatter(X_train, y_train)\naxarr[1].scatter(X_val, y_val)\nlabs = axarr[0].set(title = \"Training\", xlabel = \"x\", ylabel = \"y\")\nlabs = axarr[1].set(title = \"Validation\", xlabel = \"x\")\nplt.tight_layout()\n\n\n\n\nNow we experiment with the number of features being n_train - 1, which quite a lot features.\n\n\nn_train = 100\nn_val = 100\np_features = n_train - 1 \nnoise = 0.2\n\n# create some data\nX_train, y_train, X_val, y_val = LR.LR_data(n_train, n_val, p_features, noise)\n\nHere’s the snippets within the fit_gradient function that makes the same code work for different number of features:\nfeatures = X_.shape[1]\nself.w = np.random.rand(features)\n\nfrom linear_regression import LinearRegression \nLR = LinearRegression()\nX_train_ = LR.pad(X_train)\nX_val_ = LR.pad(X_val)\nLR.fit_analytic(X_train_, y_train) # I used the analytical formula as my default fit method\nprint(f\"Training score = {LR.score(X_train_, y_train).round(4)}\")\nprint(f\"Validation score = {LR.score(X_val_, y_val).round(4)}\")\n\nTraining score = 1.0\nValidation score = 0.6\n\n\n\n# The estimated weight vector w is\nprint(LR.w)\nprint(f\"Training Loss = {LR.Big_L(X_train_, y_train).round(2)}\")\nprint(f\"Validation Loss = {LR.Big_L(X_val_, y_val).round(2)}\")\n\n[ 3.35897356e-01  4.26186197e-01  1.26846746e+00  7.84211123e-01\n -3.83847317e-01  1.12476383e+00  1.27548460e-01  1.44945056e+00\n  4.23710897e-01  1.03434529e+00  3.14411746e-04  7.38434109e-01\n  6.66869057e-01  9.88374014e-01  1.39650694e-01  1.61561280e+00\n -7.32810852e-02  1.18823622e+00  4.23977138e-01  4.59456287e-01\n  4.16221197e-01  6.11369776e-01  2.10592793e-01  7.56427448e-01\n  2.01039541e+00  8.54031498e-01  1.51972728e+00  2.13364718e+00\n  5.68214196e-01  7.31101878e-01  1.46595210e+00  3.62402525e-01\n  1.70384015e-01  1.74795781e+00  1.09920081e+00  8.85624086e-01\n  7.91649159e-01  1.04335925e+00  2.55091015e-01  4.36460557e-01\n  9.02836076e-01  1.03472739e+00  2.53444971e-01  1.16992604e+00\n  1.17502661e+00  1.60616968e+00  8.92517928e-01  1.17984463e+00\n  9.72370518e-01  7.84570517e-01  6.13407131e-01  1.82624254e-01\n  1.52647310e+00  3.56741472e-01 -1.36790063e-01  9.32492493e-01\n  2.05640102e-01 -4.90872864e-04  1.95228099e+00  8.77542419e-01\n  3.24513252e-01  1.16658648e+00  3.41576980e-01  7.83140284e-01\n  2.33524385e-01  1.69279466e-01  8.49165950e-01  7.08840863e-01\n  8.08062472e-01  1.43853192e+00  8.07330790e-01  2.42391206e-01\n  1.89684664e-01  5.56339418e-01  1.05182184e+00  1.92041481e-01\n  1.62428088e+00  1.15523659e+00  7.22670860e-02  6.26346242e-01\n  3.24810374e-01  9.05203459e-01  3.34005575e-01  2.70030136e-01\n  2.07055509e+00  1.20485638e-01  6.20570682e-01  7.31745189e-01\n  8.87124750e-01  3.62741853e-01  1.07659053e+00  1.06243014e+00\n  5.76305831e-01  7.42427220e-01  8.49695458e-01  1.11026933e+00\n  8.31153886e-01  8.82070331e-01  5.20352496e-01 -1.54371874e+00]\nTraining Loss = 0.0\nValidation Loss = 12.5\n\n\n\nLR2 = LinearRegression()\n\nLR2.fit_gradient(X_train_, y_train)\nprint(f\"Training score = {LR2.score(X_train_, y_train).round(4)}\")\nprint(f\"Validation score = {LR2.score(X_val_, y_val).round(4)}\")\n\n# plt.plot(LR2.score_history)\n# labels = plt.gca().set(xlabel = \"Iteration\", ylabel = \"Score\")\n\n# plot it\nfig, axarr = plt.subplots(1, 2, sharex = True, sharey = True)\naxarr[0].plot(LR2.score_history)\naxarr[1].plot(LR2.loss_history)\nlabs = axarr[0].set(title = \"Score History\", xlabel = \"Iteration\", ylabel = \"Score\")\nlabs = axarr[1].set(title = \"Loss History\", xlabel = \"Iteration\", ylabel = \"Loss\")\nplt.tight_layout()\n\nTraining score = -657.0863\nValidation score = -651.8489\n\n\n\n\n\n\n\nLASSO Regularization\nIn this last section, we use a modified loss function of the following expression: \\[ L(w) = \\lVert X \\cdot w -y \\rVert ^2_2 + \\sum_{j=1}^{p-1} \\alpha \\cdot | w_j | \\]\n\nfrom sklearn.linear_model import Lasso\nL = Lasso(alpha = 0.001)\n\n\n\nn_train = 30 \nn_val = 30\np_features = 1 \nnoise = 0.2\np_features = n_train - 1\nX_train, y_train, X_val, y_val = LR.LR_data(n_train, n_val, p_features, noise)\nL.fit(X_train, y_train)\nL.score(X_val, y_val)\n\n0.721964478771783\n\n\n\nLR4 = LinearRegression()\nLR4.lasso_score(n_train, n_val, noise)\nLR4.lin_regress_score(n_train, n_val, noise)\nLR4.lin_regress_score_analytic(n_train, n_val, noise)\n\n\n# from matplotlib.pyplot import figure\n# figure(figsize=(8, 6), dpi = 156)\nfig, axarr = plt.subplots(1, 3, sharex = False, sharey = False)\naxarr[0].plot(LR4.lasso_score_history)\naxarr[1].plot(LR4.fit_gradient_score_history)\naxarr[2].plot(LR4.fit_analytic_score_history)\nlabs = axarr[0].set(title = \"LASSO Score History\", xlabel = \"number of features\", ylabel = \"Score\")\nlabs = axarr[1].set(title = \"Linear regression fit_gradient Score History\", xlabel = \"number of features\", ylabel = \"Score\")\nlabs = axarr[2].set(title = \"Linear regression fit_analytic Score History\", xlabel = \"number of features\", ylabel = \"Score\")\nplt.tight_layout()\n\n\n\n\n\nprint(LR4.lasso_score_history)\nprint(\"***\")\nprint(LR4.fit_gradient_score_history)\nprint(\"***\")\nprint(LR4.fit_analytic_score_history)\n\n[-1.7700549310005502, -5.137909348273133, -9.274841660467956, -7.681489796048626, -7.3255260821958705, -24.005163641299532, -19.135550322502123, -31.348653994040852, -23.91004118879128, -47.47525250817049, -39.885103376251685, -28.464507570828516, -14.378534389284948, -27.419060406337177, -22.535726854611458, -50.71947803644064, -58.52138776931577, -34.353448619227585, -72.52444472077835, -122.5700388722237, -46.4210177063708, -93.45121027939727, -96.91440538678344, -97.4422732695729, -159.4308536567463, -63.7940485464868, -86.64195935686408, -60.699623076897254, -140.2810073062632, -80.2746785152847, -91.8797177525378]\n***\n[-9.09306697414251, -3.3048735388131067, -8.590351176123235, -1.6703326469442326, -4.366415735943305, -2.4683137908837125, -0.9002939492942068, -6.373341227075679, -4.441457325008997, -1.1734526672994785, -4.250000926865212, -5.089895642465178, -8.506727626491168, -5.040309697836913, -3.142518284794746, -4.823483232455338, -3.14213978426303, -1.5249519377081748, -3.2799860344456855, -1.9873785109238202, -3.1971912768394466, -3.6749385569467927, -12.868901685499768, -6.379287591312853, -5.329487519631858, -2.98163744908231, -1.0952052613531844, -4.305273684599754, -5.296223124071842, -5.663713212744818, -8.026074798635358]\n***\n[-2.0650614211118214, -1.9674876338039926, -3.3786988282992603, -1.852999415328053, -1.977770600829651, -1.991073140814121, -3.2633567845124327, -2.489010907559757, -2.810803704549485, -1.491061477738191, -3.468887425259103, -1.4005782334817836, -3.272196858045522, -3.2224615484538504, -3.1750464526687594, -4.78675631871054, -3.604197423615691, -11.195525638424005, -3.4410173976263847, -2.675184377455617, -3.575974972508643, -2.692621597873615, -4.038193192818648, -12.347879739541648, -6.589224150610449, -5.041183601154226, -6.16262245261774, -5.443997649451676, -2.7375520875066317, -107.05959173199133, -35.85909769539286]"
  },
  {
    "objectID": "posts/my-blog-post-03-kernel-logistic/index.html",
    "href": "posts/my-blog-post-03-kernel-logistic/index.html",
    "title": "Kernel Logistic Regression",
    "section": "",
    "text": "Here is a link to the source code for this Kernel Logistic Regression blog post."
  },
  {
    "objectID": "posts/my-blog-post-03-kernel-logistic/index.html#try-on-a-tiny-example",
    "href": "posts/my-blog-post-03-kernel-logistic/index.html#try-on-a-tiny-example",
    "title": "Kernel Logistic Regression",
    "section": "Try on a tiny example",
    "text": "Try on a tiny example\nTo start us off, we manually create a tiny data set, and we call the fit function that we implemented in the source code (link at the start of the blog). This will help us to see clearly where our implementation works or not, and using a tiny test data set also helps for debugging purposes.\n\nXX = np.array([\n[-50.84739307, 50.71154296],\n [ 11.46814927, -9.28580296],\n [ -40.5192833,   -70.94984582],\n [ 10.73327397,  10.17310931],\n [ 10.33197143,  0.43375035],\n\n [ -1.62726102, -0.54736954],\n[-7.84739307, 5.71154296],\n [ -21.46814927, -19.28580296],\n [ -10.5192833,   -50.94984582],\n [ 7.73327397,  0.17310931],\n])\nyy = np.array([1, 1, 0, 0, 0, 0, 1, 0, 1, 1])\nprint(yy)\nplt.scatter(XX[:,0], XX[:,1], c = yy)\nlabels = plt.gca().set(xlabel = \"Feature 1\", ylabel = \"Feature 2\")\n\n[1 1 0 0 0 0 1 0 1 1]\n\n\n\n\n\nIt seems that those \\(10\\) data points does not display a linear pattern, which is what we want. Now we create an instance of the KLR class and test our fit function to see if it could classify according to nonlinear patterns.\n\nfrom sklearn.metrics.pairwise import rbf_kernel\nfrom kernel_logistic import KLR \nKLR = KLR(rbf_kernel )\nKLR.fit(XX, yy)\n\n\nprint(XX)\n\n[[-50.84739307  50.71154296]\n [ 11.46814927  -9.28580296]\n [-40.5192833  -70.94984582]\n [ 10.73327397  10.17310931]\n [ 10.33197143   0.43375035]\n [ -1.62726102  -0.54736954]\n [ -7.84739307   5.71154296]\n [-21.46814927 -19.28580296]\n [-10.5192833  -50.94984582]\n [  7.73327397   0.17310931]]\n\n\n\nplot_decision_regions(XX, yy, clf = KLR)\nmypredict = KLR.predict(XX)\ntitle = plt.gca().set(title = f\"Accuracy = {(mypredict == yy).mean()}\",\n                      xlabel = \"Feature 1\", \n                      ylabel = \"Feature 2\")\n\n\n\n\n\nprint(KLR.predict(XX))\nprint(yy)\n\n[1 1 0 0 0 0 1 0 1 1]\n[1 1 0 0 0 0 1 0 1 1]"
  },
  {
    "objectID": "posts/my-blog-post-03-kernel-logistic/index.html#try-on-a-bigger-example",
    "href": "posts/my-blog-post-03-kernel-logistic/index.html#try-on-a-bigger-example",
    "title": "Kernel Logistic Regression",
    "section": "Try on a bigger example",
    "text": "Try on a bigger example\n\n\nnp.random.seed(42)\nnp.seterr(all=\"ignore\")\n\nfrom sklearn.linear_model import LogisticRegression\nfrom mlxtend.plotting import plot_decision_regions\n\nX, y = make_moons(80, shuffle = True, noise = 0.3)\nplt.scatter(X[:,0], X[:,1], c = y)\nlabels = plt.gca().set(xlabel = \"Feature 1\", ylabel = \"Feature 2\")\n\nKLR.fit(X, y)\n\n\nplot_decision_regions(X, y, clf = KLR)\nyourpredict = KLR.predict(X)\ntitle = plt.gca().set(title = f\"Accuracy = {(yourpredict == y).mean()}\",\n                      xlabel = \"Feature 1\", \n                      ylabel = \"Feature 2\")\n\nprint(KLR.predict(X))\nprint(\"OMG\")\nprint(y)\n\n[0 0 0 0 0 0 1 1 0 0 1 0 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 0 1 1 0 1\n 0 0 1 1 0 0 0 1 1 0 1 1 1 1 1 0 0 1 0 1 0 1 1 1 1 0 1 0 1 1 0 0 1 1 0 0 0\n 1 0 1 1 0 0]\nOMG\n[0 0 0 0 0 0 0 1 0 0 1 0 1 0 1 1 1 1 1 1 0 1 0 1 0 1 1 1 0 0 1 1 0 1 1 0 1\n 0 1 0 1 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 1 1 1 0 0 0 1 0 0 0\n 1 0 1 1 0 1]\n\n\n\n\n\n\nprint(KLR.v)\n\n[ -622.23496279  1335.13521946   681.20950851 -1284.34485486\n  -525.72085209   333.19420805]"
  },
  {
    "objectID": "posts/my-blog-post-03-kernel-logistic/index.html#lets-try-a-different-data-set",
    "href": "posts/my-blog-post-03-kernel-logistic/index.html#lets-try-a-different-data-set",
    "title": "Kernel Logistic Regression",
    "section": "Let’s try a different data set",
    "text": "Let’s try a different data set\n\n\nX, y = make_moons(80, shuffle = True, noise = 0.1)\nplt.scatter(X[:,0], X[:,1], c = y)\nlabels = plt.gca().set(xlabel = \"Feature 1\", ylabel = \"Feature 2\")\n\nKLR.fit(X, y)\n\n# plot the graph\nplt.scatter(X[:,0], X[:,1], c = y)\nlabels = plt.gca().set(xlabel = \"Feature 1\", ylabel = \"Feature 2\")\n\n\n\nplot_decision_regions(X, y, clf = KLR)\nyourpredict = KLR.predict(X)\ntitle = plt.gca().set(title = f\"Accuracy = {(yourpredict == y).mean()}\",\n                      xlabel = \"Feature 1\", \n                      ylabel = \"Feature 2\")\n\nprint(KLR.predict(X))\nprint(\"OMG\")\nprint(y)\n\n[0 0 1 1 1 0 1 0 1 1 1 0 0 1 0 1 1 1 1 0 0 1 0 1 0 1 1 0 1 0 0 1 0 0 1 1 1\n 1 1 1 1 0 0 1 1 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0 1 1 1 0 1 0 0 0 0 0 1 0 1 0\n 1 0 0 1 0 0]\nOMG\n[0 0 1 1 1 0 1 0 1 1 1 0 0 1 0 1 1 1 1 0 0 1 0 1 0 1 1 0 1 0 0 1 0 1 1 1 1\n 0 1 1 1 0 0 1 1 0 1 1 0 0 1 0 1 0 0 0 0 0 1 0 1 1 1 0 1 0 0 0 0 0 1 0 1 0\n 1 0 0 1 0 0]"
  },
  {
    "objectID": "posts/my-blog-post-05-audit-bias/index.html",
    "href": "posts/my-blog-post-05-audit-bias/index.html",
    "title": "My Blog post on Auditing Allocative Bias",
    "section": "",
    "text": "Reference\nHere is a link to the main guide and reference when we write this blog post.\nAnother reference is this paper that documents which variable means what in the PUMS data set we are going to use.\n\n\nIntroduction.\n\n\nImplementation\n\n%load_ext autoreload\n%autoreload 2\n\nFirst, let’s import some libraries that we need.\n\nimport numpy as np\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom sklearn.datasets import make_blobs\nimport pandas as pd\n\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\n\nIn the following code cell, we will generate a linearly separable dataset of binary-labeled 2D points. The make_blobs function essentially takes \\(n\\) samples, a number of features, and classes, and spits out a dataset of points with a data set with the given size, and label the data points using the classes. Visually, we see two clusters of points of two different color. In this special case where I set the seed, those two clusters seems linearly separable, which just means we could draw a straight line that completely seprates them. If we go to higher dimensions, then we need precise mathematical definitions, but we don’t need to worry about that right now.\n\n\nGetting the data using folktables\n\nfrom folktables import ACSDataSource, ACSEmployment, BasicProblem, adult_filter\n\nSTATE = \"IN\"\n\ndata_source = ACSDataSource(survey_year='2018', \n                            horizon='1-Year', \n                            survey='person')\n\nacs_data = data_source.get_data(states=[STATE], download=True)\n\n\nacs_data.head()\n\n\n\n\n\n  \n    \n      \n      RT\n      SERIALNO\n      DIVISION\n      SPORDER\n      PUMA\n      REGION\n      ST\n      ADJINC\n      PWGTP\n      AGEP\n      ...\n      PWGTP71\n      PWGTP72\n      PWGTP73\n      PWGTP74\n      PWGTP75\n      PWGTP76\n      PWGTP77\n      PWGTP78\n      PWGTP79\n      PWGTP80\n    \n  \n  \n    \n      0\n      P\n      2018GQ0000042\n      3\n      1\n      2000\n      2\n      18\n      1013097\n      46\n      20\n      ...\n      7\n      6\n      82\n      44\n      6\n      76\n      83\n      44\n      45\n      44\n    \n    \n      1\n      P\n      2018GQ0000053\n      3\n      1\n      2306\n      2\n      18\n      1013097\n      19\n      48\n      ...\n      16\n      19\n      37\n      23\n      2\n      19\n      2\n      2\n      40\n      18\n    \n    \n      2\n      P\n      2018GQ0000074\n      3\n      1\n      2000\n      2\n      18\n      1013097\n      88\n      20\n      ...\n      166\n      158\n      160\n      90\n      87\n      84\n      88\n      90\n      13\n      166\n    \n    \n      3\n      P\n      2018GQ0000118\n      3\n      1\n      401\n      2\n      18\n      1013097\n      72\n      20\n      ...\n      11\n      10\n      11\n      11\n      71\n      11\n      70\n      11\n      74\n      135\n    \n    \n      4\n      P\n      2018GQ0000319\n      3\n      1\n      200\n      2\n      18\n      1013097\n      97\n      22\n      ...\n      15\n      170\n      93\n      181\n      175\n      92\n      174\n      16\n      96\n      95\n    \n  \n\n5 rows × 286 columns\n\n\n\n\n\nData wrangling, applying Logistic Regression\nWe recall the equation for a linear regression first: \\[ y = \\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\cdots + \\beta_n X_n, \\] where, \\(\\beta_i\\)’s are coefficients, \\(y\\) is the depedent variable, and the \\(X_i\\)’s are regressors (independent variables). Now, we recall logistic function (or sigmoid function), which is \\[ f(x) = \\frac{1}{1+e^{-x}}, \\] and when we put those two piece together, we obtain the formula for logistic regression: \\[ y = \\frac{1}{1+e^{\\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\cdots + \\beta_n X_n}}, \\]\nHere are some of the variables that are important for our analysis: * PINCP is total personal income. * ESR is employment status coded as a dummy variable (1 if employed, 0 if not) * SEX is binary sex, coded 1 for male, and 2 for female. * RAC1P is race (1for White Alone, 2 for Black/African American alone, 3 and above for other self-identified racial groups) * DEAR, DEYE, and DERM refers to disability status relating to ear, eye, etc. * AGEP is Age, represented as integers. * SCHL is educational attainment, coded as integers. * MAR is Marital status, coded using integers. * RELP is Relationship. * COW is class of worker, coded using integers. * OCCP is occupation. * POBP is place of birth. * WKHP is usual hours worked per week in the past 12 months.\n\nLet’s consider the following task: we are going to\n\n\nTrain a machine learning algorithm to predict whether someone is currently employed, based on their other attributes not including race, and\n\n\nPerform a bias audit of our algorithm to determine whether it displays racial bias.\n\n\nFirst, let’s be more specific:\n\n\nmy_features=['PINCP', 'ESR', 'AGEP', 'SCHL', 'MAR', 'RELP', 'DIS', 'ESP', 'CIT', 'MIG', 'MIL', 'ANC', 'NATIVITY', 'DEAR', 'DEYE', 'DREM', 'SEX', 'RAC1P']\nnew_df = acs_data[my_features]\nnew_df['INCOME'] = np.where(new_df['PINCP'] >= 70000, 1, 0)\n\n/var/folders/py/q89_57zx5wbchyh0d30zhprc0000gn/T/ipykernel_53991/2512992985.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  new_df['INCOME'] = np.where(new_df['PINCP'] >= 70000, 1, 0)\n\n\n\n# new_df.loc[new_df['PINCP'] >= 70000]\nnew_df.loc[new_df['ESR'] == 1]\n\n\n\n\n\n  \n    \n      \n      PINCP\n      ESR\n      AGEP\n      SCHL\n      MAR\n      RELP\n      DIS\n      ESP\n      CIT\n      MIG\n      MIL\n      ANC\n      NATIVITY\n      DEAR\n      DEYE\n      DREM\n      SEX\n      RAC1P\n      INCOME\n    \n  \n  \n    \n      6\n      200.0\n      1.0\n      19\n      19.0\n      5\n      17\n      1\n      NaN\n      1\n      3.0\n      4.0\n      4\n      1\n      2\n      2\n      1.0\n      2\n      1\n      0\n    \n    \n      9\n      3000.0\n      1.0\n      18\n      18.0\n      5\n      17\n      2\n      NaN\n      1\n      1.0\n      4.0\n      4\n      1\n      2\n      2\n      2.0\n      1\n      1\n      0\n    \n    \n      12\n      3000.0\n      1.0\n      21\n      19.0\n      5\n      17\n      2\n      NaN\n      1\n      1.0\n      4.0\n      1\n      1\n      2\n      2\n      2.0\n      2\n      1\n      0\n    \n    \n      14\n      38300.0\n      1.0\n      56\n      15.0\n      5\n      17\n      1\n      NaN\n      1\n      1.0\n      4.0\n      3\n      1\n      2\n      2\n      1.0\n      1\n      1\n      0\n    \n    \n      16\n      5000.0\n      1.0\n      19\n      19.0\n      5\n      17\n      2\n      NaN\n      1\n      1.0\n      4.0\n      4\n      1\n      2\n      2\n      2.0\n      2\n      1\n      0\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      67667\n      28600.0\n      1.0\n      33\n      16.0\n      5\n      13\n      2\n      NaN\n      1\n      1.0\n      4.0\n      4\n      1\n      2\n      2\n      2.0\n      1\n      1\n      0\n    \n    \n      67669\n      45000.0\n      1.0\n      27\n      19.0\n      1\n      1\n      2\n      NaN\n      1\n      1.0\n      4.0\n      2\n      1\n      2\n      2\n      2.0\n      1\n      1\n      0\n    \n    \n      67673\n      90000.0\n      1.0\n      42\n      22.0\n      1\n      0\n      2\n      NaN\n      1\n      1.0\n      4.0\n      1\n      1\n      2\n      2\n      2.0\n      2\n      2\n      1\n    \n    \n      67674\n      22000.0\n      1.0\n      46\n      22.0\n      1\n      1\n      2\n      NaN\n      1\n      1.0\n      4.0\n      1\n      1\n      2\n      2\n      2.0\n      1\n      2\n      0\n    \n    \n      67679\n      55000.0\n      1.0\n      67\n      21.0\n      5\n      0\n      2\n      NaN\n      1\n      1.0\n      4.0\n      1\n      1\n      2\n      2\n      2.0\n      1\n      1\n      0\n    \n  \n\n31117 rows × 19 columns\n\n\n\n\nfeatures_to_use = [f for f in my_features if f not in [\"ESR\", \"RAC1P\"]]\n\n\nprint(features_to_use)\n\n['PINCP', 'AGEP', 'SCHL', 'MAR', 'RELP', 'DIS', 'ESP', 'CIT', 'MIG', 'MIL', 'ANC', 'NATIVITY', 'DEAR', 'DEYE', 'DREM', 'SEX']\n\n\n\nEmploymentProblem = BasicProblem(\n    features=features_to_use,\n    target='ESR',\n    target_transform=lambda x: x == 1,\n    group='RAC1P',\n    # group='SEX',\n    preprocess=lambda x: x,\n    postprocess=lambda x: np.nan_to_num(x, -1),\n)\n\nfeatures, label, group = EmploymentProblem.df_to_numpy(acs_data)\n\n\nX_train, X_test, y_train, y_test, group_train, group_test = train_test_split(\n    features, label, group, test_size=0.2, random_state=0)\n\n\n\nWorking with pd.DataFrame, apply logistic regression in Python with scikit-learn.\n\n\ndf = pd.DataFrame(X_train, columns = features_to_use)\ndf[\"group\"] = group_train\ndf[\"label\"] = y_train\n\n\n# df.loc[df['group'] == 2]\ndf.head()\n\n\n\n\n\n  \n    \n      \n      PINCP\n      AGEP\n      SCHL\n      MAR\n      RELP\n      DIS\n      ESP\n      CIT\n      MIG\n      MIL\n      ANC\n      NATIVITY\n      DEAR\n      DEYE\n      DREM\n      SEX\n      group\n      label\n    \n  \n  \n    \n      0\n      0.0\n      31.0\n      20.0\n      1.0\n      1.0\n      2.0\n      0.0\n      1.0\n      1.0\n      4.0\n      4.0\n      1.0\n      2.0\n      2.0\n      2.0\n      2.0\n      1\n      False\n    \n    \n      1\n      32000.0\n      50.0\n      18.0\n      5.0\n      0.0\n      2.0\n      0.0\n      1.0\n      1.0\n      4.0\n      4.0\n      1.0\n      2.0\n      2.0\n      2.0\n      2.0\n      1\n      True\n    \n    \n      2\n      0.0\n      2.0\n      0.0\n      5.0\n      2.0\n      2.0\n      5.0\n      1.0\n      1.0\n      0.0\n      4.0\n      1.0\n      2.0\n      2.0\n      0.0\n      1.0\n      1\n      False\n    \n    \n      3\n      0.0\n      14.0\n      9.0\n      5.0\n      2.0\n      2.0\n      7.0\n      1.0\n      3.0\n      0.0\n      2.0\n      1.0\n      2.0\n      2.0\n      2.0\n      2.0\n      1\n      False\n    \n    \n      4\n      38000.0\n      58.0\n      21.0\n      1.0\n      1.0\n      2.0\n      0.0\n      1.0\n      1.0\n      4.0\n      1.0\n      1.0\n      2.0\n      2.0\n      2.0\n      2.0\n      1\n      True\n    \n  \n\n\n\n\n\nBasic Discriptives\nUsing this data frame, we first answer the following questions:\n\nHow many individuals are in the data?\nOf these individuals, what proportion have target label equal to 1? In employment prediction, these would correspond to employed individuals.\nOf these individuals, how many are in each of the groups?\nIn each group, what proportion of individuals have target label equal to 1?\nCheck for intersectional trends by studying the proportion of positive target labels broken out by your chosen group labels and an additional group label. For example, if you chose race (RAC1P) as your group, then you could also choose sex (SEX) and compute the proportion of positive labels by both race and sex. This might be a good opportunity to use a visualization such as a bar chart, e.g. via the seaborn package.\n\n\nprint(f\"The Number of Rows is: {df.shape[0]}\")\nprint(f\"The Number of Columns is: {df.shape[1]}\")\nprint(f\"The Number of individual who are employed is: {df.loc[df['label'] == True].shape[0]}\")\nprint(f\"The Percentage of individuals who are employed is: {24858/54144}\")\n###\nprint(f\"The Number of person who identify as black is: {df.loc[df['group']==2].shape[0]}\")\nprint(f\"The Number of person who identify as white is: {df.loc[df['group']==1].shape[0]}\")\nprint(f\"The Number of person who identify as black and is currently employed: {df.loc[(df['group']==2) & (df['label']==True)].shape[0]}\")\nprint(f\"The Number of person who identify as white and is currently employed: {df.loc[(df['group']==1) & (df['label']==True)].shape[0]}\")\n###\nprint(f\"The Number of person who identify as other racial groups is: {df.loc[df['group']>= 3].shape[0]}\")\nprint(f\"The Number of person who identify as other racial groups and is currently employed: {df.loc[(df['group']>= 3) & (df['label']==True)].shape[0]}\")\n###\nprint(f\"The Percentage of person who identify as black and is also employed is: {1374/3626}\")\nprint(f\"The Percentage of person who identify as white and is also employed is: {22200/47332}\")\nprint(f\"The Percentage of person who identify as other racial groups and is also employed is: {1284/3186}\")\n\nThe Number of Rows is: 54144\nThe Number of Columns is: 18\nThe Number of individual who are employed is: 24858\nThe Percentage of individuals who are employed is: 0.4591090425531915\nThe Number of person who identify as black is: 3626\nThe Number of person who identify as white is: 47332\nThe Number of person who identify as black and is currently employed: 1374\nThe Number of person who identify as white and is currently employed: 22200\nThe Number of person who identify as other racial groups is: 3186\nThe Number of person who identify as other racial groups and is currently employed: 1284\nThe Percentage of person who identify as black and is also employed is: 0.3789299503585218\nThe Percentage of person who identify as white and is also employed is: 0.4690272965435646\nThe Percentage of person who identify as other racial groups and is also employed is: 0.4030131826741996\n\n\n\nprint( df.groupby(\"SEX\").size() )\nprint(\"***\")\nprint( df.groupby(\"group\").size() )\nprint(\"***\")\nprint( df.groupby(\"label\").size() )\nprint(\"***\")\nprint( df.groupby(['group', 'label']).size())\nprint(\"***\")\nprint(\"the average employment rate is: \" , df[\"label\"].mean())\n\nSEX\n1.0    26578\n2.0    27566\ndtype: int64\n***\ngroup\n1    47332\n2     3626\n3       83\n4        1\n5       29\n6      942\n7       17\n8      906\n9     1208\ndtype: int64\n***\nlabel\nFalse    29286\nTrue     24858\ndtype: int64\n***\ngroup  label\n1      False    25132\n       True     22200\n2      False     2252\n       True      1374\n3      False       50\n       True        33\n4      True         1\n5      False       17\n       True        12\n6      False      492\n       True       450\n7      False        6\n       True        11\n8      False      516\n       True       390\n9      False      821\n       True       387\ndtype: int64\n***\nthe average employment rate is:  0.4591090425531915\n\n\nThe following code is much more efficient, it shows the employment rate for each group. The employment rate for white people in IN in 2018 is \\(47\\) percent. The employment for black people in IN in 2018 is \\(37.9\\) percent.\n\nprint( df.groupby(\"group\")[\"label\"].mean() )\n\ngroup\n1    0.469027\n2    0.378930\n3    0.397590\n4    1.000000\n5    0.413793\n6    0.477707\n7    0.647059\n8    0.430464\n9    0.320364\nName: label, dtype: float64\n\n\nMore efficiently, we could use the following line of code and read off the numbers that for people identifying as white male, the employment rate is \\(50.7\\) percent. For people identifying as white female, the employment rate is \\(43.2\\) percent.\n\ndf.groupby([\"group\",\"SEX\"])[\"label\"].mean()\n\ngroup  SEX\n1      1.0    0.507493\n       2.0    0.431978\n2      1.0    0.357579\n       2.0    0.400000\n3      1.0    0.348837\n       2.0    0.450000\n4      2.0    1.000000\n5      1.0    0.352941\n       2.0    0.500000\n6      1.0    0.510067\n       2.0    0.448485\n7      1.0    0.666667\n       2.0    0.625000\n8      1.0    0.475877\n       2.0    0.384444\n9      1.0    0.312178\n       2.0    0.328000\nName: label, dtype: float64\n\n\nThe below graph shows the number of female in each racial group and male in each racial group.\n\ncounts = df.groupby([\"group\", \"SEX\"]).size().reset_index(name = \"n\")\nsns.barplot(data = counts, x = \"SEX\", y = \"n\", hue = \"group\")\n\n<AxesSubplot: xlabel='SEX', ylabel='n'>\n\n\n\n\n\n\n\npercentages = df.groupby([\"group\", \"SEX\"])[\"label\"].mean().reset_index()\nsns.barplot(data = percentages, x = \"SEX\", y = \"label\", hue = \"group\")\n\n<AxesSubplot: xlabel='SEX', ylabel='label'>\n\n\n\n\n\nThe number of persons in the data set is \\(54144.\\) The percentage of individuals who are employed is about \\(46\\) percent.\n\n\n# model = make_pipeline(StandardScaler(), LogisticRegression())\nmodel = LogisticRegression(solver='liblinear', random_state=0)\nmodel.fit(X_train, y_train)\n\nLogisticRegression(random_state=0, solver='liblinear')In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegressionLogisticRegression(random_state=0, solver='liblinear')\n\n\n\ny_hat = model.predict(X_test)\n\n\nprint(f\" The overall accuracy in predicting whether someone is employed in 2018 in Indiana is: {(y_hat == y_test).mean()}\", \"\\n\",\n    f\" The accuracy for white individuals is {(y_hat == y_test)[group_test == 1].mean()}\", \"\\n\", \n    f\" The accuracy for black individuals is {(y_hat == y_test)[group_test == 2].mean()}\")\n\n The overall accuracy in predicting whether someone is employed in 2018 in Indiana is: 0.8331855791962175 \n  The accuracy for white individuals is 0.8338424983027835 \n  The accuracy for black individuals is 0.8265086206896551\n\n\n\n\nTrain my model\n\nregress = model.fit(X_train, y_train)\n\n\nregress.score(X_test, y_test)\n\n0.8331855791962175\n\n\n\nmodel.score(X_test, y_test)\n\n0.8331855791962175\n\n\n\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, y_hat))\n\n              precision    recall  f1-score   support\n\n       False       0.82      0.89      0.85      7277\n        True       0.86      0.77      0.81      6259\n\n    accuracy                           0.83     13536\n   macro avg       0.84      0.83      0.83     13536\nweighted avg       0.83      0.83      0.83     13536\n\n\n\n\n\n\nAudit the model\n\nOverall Measures\n\nWhat is the overall accuracy of your model?\nWhat is the positive predictive value (PPV) of your model?\nWhat are the overall false negative and false positive rates (FNR and FPR) for your model? ### By-Group Measures\nWhat is the accuracy of your model on each subgroup?\nWhat is the PPV of your model on each subgroup?\nWhat are the FNR and FPR on each subgroup? ### Bias Measures\nSee Chouldechova (2017) for definitions of these terms. For calibration, you can think of the score as having only two values, 0 and 1.\nIs your model approximately calibrated?\nDoes your model satisfy approximate error rate balance?\nDoes your model satisfy statistical parity?\n\n\n\nfor obj in [features, label, group]:\n  print(obj.shape)\n\nprint(features)\nprint(group)\nprint(label)\n\n(67680, 16)\n(67680,)\n(67680,)\n[[1.70e+03 2.00e+01 1.90e+01 ... 2.00e+00 2.00e+00 2.00e+00]\n [9.80e+03 4.80e+01 1.30e+01 ... 2.00e+00 1.00e+00 2.00e+00]\n [3.50e+03 2.00e+01 1.90e+01 ... 2.00e+00 2.00e+00 1.00e+00]\n ...\n [2.11e+04 6.70e+01 1.60e+01 ... 1.00e+00 2.00e+00 1.00e+00]\n [8.40e+03 6.70e+01 1.90e+01 ... 2.00e+00 2.00e+00 2.00e+00]\n [5.50e+04 6.70e+01 2.10e+01 ... 2.00e+00 2.00e+00 1.00e+00]]\n[9 1 1 ... 1 1 1]\n[False False False ... False False  True]\n\n\nRecall that: * upper-left corner is TN, which stands for True negative * lower-left corner is FN, False negative * upper-right corner is FP, which stands for False positive * lower-right corner is TP, True positive\nWe also care about the FPR, which stands for the false positive rate, which is top-right corner of the confusion matrix (after we normalize). FNR is false negative rate.\n\nmy_matr = confusion_matrix(y_test, model.predict(X_test))\nfig, ax = plt.subplots(figsize=(4,4))\nax.imshow(my_matr)\nax.xaxis.set(ticks=(0,1), ticklabels=('Predicted False', 'Predicted True'))\nax.yaxis.set(ticks=(0,1), ticklabels=('Actually False', 'Actually True'))\nax.set_ylim(1.5, -0.5)\n\nfor i in range(2):\n    for j in range(2):\n        ax.text(j,i, my_matr[i,j], ha='center', va='center', color='black')\n\n\n\n\n\n\nmy_matr = confusion_matrix(y_test[], model.predict(X_test), normalize=\"true\")\nfig, ax = plt.subplots(figsize=(4,4))\nax.imshow(my_matr)\nax.xaxis.set(ticks=(0,1), ticklabels=('Predicted False', 'Predicted True'))\nax.yaxis.set(ticks=(0,1), ticklabels=('Actually False', 'Actually True'))\nax.set_ylim(1.5, -0.5)\n\nfor i in range(2):\n    for j in range(2):\n        ax.text(j,i, my_matr[i,j].round(4), ha='center', va='center', color='black')\n\n\n\n\n\n\nConcluding Discussion"
  },
  {
    "objectID": "posts/my-blog-post-01/index.html",
    "href": "posts/my-blog-post-01/index.html",
    "title": "My first Blog post on Perceptron",
    "section": "",
    "text": "Introduction.\nIn this blog post, we implement the perceptron algorithm, which is oftentimes the first machine learning algorithm a student encounters in a machine learning class (which is at least true in my case). We write code in Python for this implementation, and our goal is to classify binary labeled artificial data.\n\n\nImplementation\n\n%load_ext autoreload\n%autoreload 2\n\nThe autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\nFirst, let’s import some libraries that we need.\n\nimport numpy as np\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\nfrom sklearn.datasets import make_blobs\n\nIn the following code cell, we will generate a linearly separable dataset of binary-labeled 2D points. The make_blobs function essentially takes \\(n\\) samples, a number of features, and classes, and spits out a dataset of points with a data set with the given size, and label the data points using the classes. Visually, we see two clusters of points of two different color. In this special case where I set the seed, those two clusters seems linearly separable, which just means we could draw a straight line that completely seprates them. If we go to higher dimensions, then we need precise mathematical definitions, but we don’t need to worry about that right now.\n\nnp.random.seed(42)\nn=100\np_features = 3\n\nX, y = make_blobs(n_samples = 100, n_features=p_features-1, centers=[ (-1.7,-1.7, -1.7), (1.7,1.7, 1.7) ])\n\nfig=plt.scatter(X[:,0], X[:,1], c=y)\nxlab=plt.xlabel(\"feature 1\")\nylab=plt.ylabel(\"feature 2\")\n\n\n\n\n\n\nThe Perceptron Algorithm\nOur goal is to find the separating line using the perceptron algorithm. The algorithm takes in our feature matrix X and our vector of labels y. As detailed in the source code (link at the start of the blog), the algorithm performs the following steps: * Initialize the weights vector w * Iterate through the data points (randomly), updating the weights w until either a user-specified maximum number of iteration is reached. * record the accuracy score in self.history.\nState in mathematical terms, we would like to apply the perceptron algorithm to find the hyperplane that separates those data points, given that they are separable (so perceptron algorithm will converge). A key equation in the perceptron algorithm that defines the update is the following:\n\n\n\\[ \\tilde{w}^{(t+1)} = \\tilde{w}^{t} + \\mathbb{1} (\\tilde{y}_i \\langle \\tilde{w}^{(t)}, \\tilde{x}_i \\rangle < 0)\\tilde{y}_i\\tilde{x}_i.\\]\nAnd this will provide us with the step to update w in each iteration.\n\nfrom perceptron import Perceptron\n\np = Perceptron()\np.fit(X, y, maxiter=10000)\n\nprint(p.history[-10:])\nprint(p.w_)\n# print(X)\n\n# print(w)\n\n[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n[ 50.44366343  39.1028252   21.79442178 -40.        ]\n\n\n\nfig = plt.plot(p.history)\nxlab = plt.xlabel(\"Iteration\")\nylab = plt.ylabel(\"Accuracy\")\n\n\n\n\n\ndef draw_line(w, x_min, x_max):\n  x = np.linspace(x_min, x_max, 101)\n  y = -(w[0]*x + w[2])/w[1]\n  plt.plot(x, y, color = \"black\")\n\nfig = plt.scatter(X[:,0], X[:,1], c = y)\nfig = draw_line(p.w_, -2, 2)\n\nxlab = plt.xlabel(\"Feature 1\")\nylab = plt.ylabel(\"Feature 2\")\n\n\n\n\n\nprint(p.score(X,y))\n\n1.0\n\n\n\nprint((1<2)*2)\nprint((1>2)*2)\n\n2\n0\n\n\n\nprint(p.predict(X))\nprint(\"\\n\\n\")\nprint(y)\n\n[1 0 0 0 1 1 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 1 1 1 1 1 0 1 1 1 0 0 1 1 0\n 0 1 0 0 0 1 1 1 0 1 0 0 1 1 0 1 0 1 1 1 0 1 1 0 0 0 0 1 1 0 0 1 1 0 0 0 0\n 0 1 0 0 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 1 0 1 0 1 0 0]\n\n\n\n[1 0 0 0 1 1 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 0 0 1 1 1 1 1 0 1 1 1 0 0 1 1 0\n 0 1 0 0 0 1 1 1 0 1 0 0 1 1 0 1 0 1 1 1 0 1 1 0 0 0 0 1 1 0 0 1 1 0 0 0 0\n 0 1 0 0 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 1 0 1 0 1 0 0]\n\n\n\nprint(p.w_)\nprint(np.size(p.w_))\n\n[39.71808898 55.01564117 -7.        ]\n3\n\n\n\n\nTime complexity for update step\nRecall our equation for the update step: \\[ \\tilde{w}^{(t+1)} = \\tilde{w}^{t} + \\mathbb{1} (\\tilde{y}_i \\langle \\tilde{w}^{(t)}, \\tilde{x}_i \\rangle < 0)\\tilde{y}_i\\tilde{x}_i.\\] This involves taking an inner product $ ^{(t)}, _i , $ which has time complexity \\(O(p)\\) where \\(p\\) is a constant denoting the number of features. The other operations are addition, multiplication, taking the simple (step) function, which have constant time complexity \\(O(1)\\)."
  },
  {
    "objectID": "posts/example-blog-post/index.html",
    "href": "posts/example-blog-post/index.html",
    "title": "Hello Blog",
    "section": "",
    "text": "This is an example of the blog posts that you’ll submit as your primary form of learning demonstration in CSCI 0451. I created this post by modifying the file posts/example-blog-post/index.ipynb in VSCode. You can also use JupyterLab for this editing if you prefer. Finally, it is possible to write blog posts without using notebooks by writing .qmd files, as illustrated here."
  },
  {
    "objectID": "posts/example-blog-post/index.html#math",
    "href": "posts/example-blog-post/index.html#math",
    "title": "Hello Blog",
    "section": "Math",
    "text": "Math\nIn addition to regular text using the Markdown specification, you can also write mathematics, enclosed between dollar signs. The syntax for writing math is very similar to the syntax used in the \\(\\LaTeX\\) markup language. For example, $f(x) \\approx y$ renders to \\(f(x) \\approx y\\). To place complex mathematical expressions on their own lines, use double dollar signs. For example, the expression\n$$\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2$$\nrenders to:\n\\[\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2\\;.\\]\nBehind the scenes, math is powered by the MathJax engine. For more on how to write math, check this handy tutorial and quick reference."
  },
  {
    "objectID": "posts/my-blog-post-02-gradient-descent/index.html",
    "href": "posts/my-blog-post-02-gradient-descent/index.html",
    "title": "Gradient Descent",
    "section": "",
    "text": "Reference\nHere is a link to the main reference we are using when crafting this blog post.\n\n\nIntroduction\nLet’s recall what problem we are investigating. We are working on the empirical risk minimization problem, which involves finding a weight vector w, that satisfy the following general form: #### \\[ \\hat{w} = \\arg \\min_{w} L(w). \\]\nAlso, remember from our previous blog post that our data includes a feature matrix X, which is a \\(n\\times p\\) matrix with entries being real numbers. The number \\(n\\) represents the number of distinct observations, and we have \\(n\\) rows in X. \\(p\\) is the number of features. Our data also have a y, which is called target vector and lives in \\(\\mathbb{R}^n\\). The target vector gives a label for each observation.\nWe also need some formulas that’s computed using pen and paper by our friends in the math department. First, we remember this piece of notation $ f_w(x) = w, x $ and we could obtain the following: #### \\[ \\nabla L(w) = \\nabla ( \\frac{1}{n} \\sum_{i=1}^{n} \\ell [ f_w(x_i), y_i ] ). \\] And remember $ = w, x_i $ (another piece of notation!), the logistic loss we are using is #### \\[ \\ell(\\hat{y}, y) = -y \\log \\sigma (\\hat{y}) - (1-y) \\log(1-\\sigma(\\hat{y})), \\] where $ () $ denotes the logistical sigmoid function. as demonstrated in the link under the Reference heading above, we have #### \\[ \\frac{d \\ell(\\hat{y},y)}{d \\hat{y}} = \\sigma (\\hat{y}) -y. \\] Therefore, with some effort, one can do this computation and obtain the following formula: #### \\[ \\nabla L(w) = \\frac{1}{n} \\sum_{i=1}^{n} (\\sigma(\\hat{y_i}) - y_i) x_i, \\] and this will help us to implement the gradient of the empirical risk for logistic regression in python code using numpy library.\n\n%load_ext autoreload\n%autoreload 2\n\nWe start by importing the relavant libraries and creating some data points using the make_blobs function that we imported from sklearn.datasets. We would like to create some non-separable data, which means graphically in 2 dimension, we cannot draw a straight line to separate the data points of the two different classes (as indicated by the color). Notice that the horizontal axis is Feature 1, and the vertical axis is Feature 2.\n\nfrom sklearn.datasets import make_blobs\nfrom matplotlib import pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (18, 6)\n\nimport numpy as np\nnp.random.seed(42)\nnp.seterr(all='ignore') \n\n# make the data\np_features = 3\nX, y = make_blobs(n_samples = 200, n_features = p_features - 1, centers = [(-1, -1), (1, 1)])\n\nfig = plt.scatter(X[:,0], X[:,1], c = y)\nxlab = plt.xlabel(\"Feature 1\")\nylab = plt.ylabel(\"Feature 2\")\n\n\n\n\nAfter we generated the data, which includes a feature matrix X, which is a \\(n\\times p\\) matrix with entries being real numbers. The number \\(n\\) represents the number of distinct observations, and we have \\(n\\) rows in X. \\(p\\) is the number of features. Our data also have a y, which is called target vector and lives in \\(\\mathbb{R}^n\\). The target vector gives a label, value, or outcome for each observation. # Implementing Regular Gradient Descent We start by calling the function fit, which implements regular gradient descent, and we call it regular to distinguish it from Stochastic gradient descent, which we implement next. We are interested in finding the value for w_, and fit function uses the following key equation to iteratively update w_ until we have a “good enough” w_ or we reach the user-specified maximum number of iterations allowed, whichever comes first: #### \\[ w^{(t+1)} \\leftarrow w^{(t)} - \\alpha \\cdot \\nabla L(w^{(t)}), \\] where \\(\\nabla L(w)\\) is given by the following equation: ##### \\[ \\nabla L(w) = \\frac{1}{n} \\sum_{i=1}^{n} \\nabla \\ell(f_{w}(x_i), y_i)\\]\n\nfrom solutions_logistic import LogisticRegression \nLR = LogisticRegression()\nX_ = LR.pad(X)\n\n# inspect the fitted value of w\nLR.fit(X, y, alpha = 0.01, max_epochs = 2000)\nprint(LR.w_)\n\n[ 1.6041937   1.51398202 -0.23370397]\n\n\nAfter calling the function fit, we obtain the weight vector w_, but are they doing what they are supposed to do? How big is the loss for this perticular case? We could visualize this result by plotting the line that hopefully separates the data points in a intuitive way. See the picture on the left. Now we would like to find out about how the empirical loss evolves as the number of iteration goes up. Let’s plot this in the picture on the right.\n\nnp.random.seed(42)\n# pick a random weight vector and calculate the loss\nw = .5 - np.random.rand(p_features)\n# fig = plt.scatter(X_[:,0], X_[:,1], c = y)\n# xlab = plt.xlabel(\"Feature 1\")\n# ylab = plt.ylabel(\"Feature 2\")\n# f1 = np.linspace(-3, 3, 101)\n# p = plt.plot(f1, (LR.w_[2] - f1*LR.w_[0])/LR.w_[1], color = \"black\")\n# title = plt.gca().set_title(f\"Loss = {LR.last_loss}\")\n\n\nfig, axarr = plt.subplots(1, 2)\n\naxarr[0].scatter(X[:,0], X[:,1], c = y)\naxarr[0].set(xlabel = \"Feature 1\", ylabel = \"Feature 2\", title = f\"Loss = {LR.last_loss}\")\n\nf1 = np.linspace(-3, 3, 101)\n\np = axarr[0].plot(f1, (LR.w_[2] - f1*LR.w_[0])/LR.w_[1], color = \"black\")\n\naxarr[1].plot(LR.loss_history)\naxarr[1].set(xlabel = \"Iteration number\", ylabel = \"Empirical Risk\")\nplt.tight_layout()\n\n\n\n\n\n\nAccuracy of regular gradint descent\nAgain, we draw the scatter plot and the fitted line on the left, and on the right, we plot the evolution of the accuracy score as the number of iteration increases.\n\nmyScore = LR.score(X_,y)\n\nfig, axarr = plt.subplots(1, 2)\naxarr[0].scatter(X[:,0], X[:,1], c = y)\naxarr[0].set(xlabel = \"Feature 1\", ylabel = \"Feature 2\", title = f\"Score = {myScore}\")\nf1 = np.linspace(-3, 3, 101)\np = axarr[0].plot(f1, (LR.w_[2] - f1*LR.w_[0])/LR.w_[1], color = \"black\")\naxarr[1].plot(LR.score_history)\naxarr[1].set(xlabel = \"Iteration number\", ylabel = \"Accuracy Score\")\nplt.tight_layout()\n\n\n\n\nWe could also print out the vector y and the predicted vector given by the function predict(). In this way, we could have a look “under the hood” and obtain a rough sense how good is our prediction.\n\nprint(y)\nprint(LR.predict(X_))\n\n[0 0 0 1 0 0 0 1 1 1 0 1 0 1 0 1 0 1 0 0 0 0 0 1 1 1 1 0 0 1 1 1 1 0 0 0 1\n 0 1 1 1 1 0 1 0 1 0 0 1 0 0 0 1 0 1 1 1 0 1 0 0 1 1 1 0 0 0 1 1 1 1 0 0 1\n 0 0 0 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 1 0 1 1 0 0 1 0 0 0 0\n 1 1 1 0 0 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 0 0 0 1 0 1 0 1 1 1 1 0 0 0 0\n 0 0 1 0 1 0 0 1 1 1 0 1 1 0 1 0 0 0 1 1 1 1 1 0 0 1 0 0 0 1 0 1 0 0 1 0 0\n 1 0 1 0 0 1 0 1 1 0 0 0 1 1 0]\n[0 0 0 1 0 0 0 1 1 1 1 1 0 1 0 1 0 1 0 0 0 0 0 1 1 1 1 0 0 1 1 1 1 0 0 0 1\n 0 1 1 1 1 0 1 0 1 0 0 1 0 0 0 1 0 1 1 1 0 1 0 0 0 1 1 0 0 0 1 1 1 1 1 0 0\n 0 0 1 1 1 0 0 1 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 0 0 0 1 0 1 1 0 0 1 0 0 0 0\n 1 1 1 0 0 1 0 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 0 0 0 0 0 1 1 1 1 0 0 1 0\n 0 0 1 0 0 0 0 1 1 1 0 1 1 1 1 0 0 0 1 0 1 1 1 0 0 1 0 0 0 1 1 1 0 0 1 0 0\n 1 0 1 0 0 1 0 1 1 0 0 0 1 1 0]\n\n\n\n\nImplementing Stochastic Gradient Descent\nHere, by “Stochastic” we just mean we introduce a certain amount of randomness to our gradient descent step. The modification from the regular gradient descent is as follows. We pick a random subset \\(S \\subset [n]\\) and we let ##### \\[ \\nabla_S L(w) = \\frac{1}{|S|} \\sum_{i \\in S} \\nabla \\ell(f_{w}(x_i), y_i).\\] And the rest is business as usual. We deem our weights w as “good enough” when: either the user-specified maximum number of iteration is reached, or the current empirical risk function is “close enough” to the one from the previous iteration. With the mathematics technicality out of the way, let’s visualize the scatter plot, the best-fit-line, and the evolution of the empirical risk, and the evolution of the accuracy score all in one go.\n\n\nLR.fit_stochastic(X, y, \n                  max_epochs = 100, \n                  momentum = False, \n                  batch_size = 10, \n                  alpha = .05) \n\nloss = LR.stochastic_loss_history[-1]\n\nfig, axarr = plt.subplots(1, 3)\n\naxarr[0].scatter(X[:,0], X[:,1], c = y)\naxarr[0].set(xlabel = \"Feature 1\", ylabel = \"Feature 2\", title = f\"Loss = {loss}\")\n\nf1 = np.linspace(-3, 3, 101)\n\np = axarr[0].plot(f1, (LR.omega_[2] - f1*LR.omega_[0])/LR.omega_[1], color = \"black\")\n\naxarr[1].plot(LR.stochastic_loss_history)\naxarr[1].set(xlabel = \"Iteration number\", ylabel = \"Empirical Risk\")\n\naxarr[2].plot(LR.score_history)\naxarr[2].set(xlabel = \"Iteration number\", ylabel = \"Accuracy Score\")\nplt.tight_layout()\n\n\n\n\n\n\nIllustration\nHaving seen how regular gradient descent and stochastic gradient descent perform, we could add a momentum feature to the stochastic gradient descent. Then we have the choice of selecting momentum = True when we call the function fit_stochastic. Hence, we could compare the three versions of gradient descent and plot their respective empirical risk (loss) evolution in one picture, where the horizontal axis is number of iterations, and the vertical axis is empirical risk.\n\nLR = LogisticRegression()\nLR.fit_stochastic(X, y, \n                  max_epochs = 100, \n                  momentum = True, \n                  batch_size = 10, \n                  alpha = 0.05) \n\nnum_steps = len(LR.stochastic_loss_history)\nplt.plot(np.arange(num_steps) + 1, LR.stochastic_loss_history, label = \"stochastic gradient (momentum)\")\n\nLR = LogisticRegression()\nLR.fit_stochastic(X, y, \n                  max_epochs = 100, \n                  momentum = False, \n                  batch_size = 10, \n                  alpha = 0.05)\n\nnum_steps = len(LR.stochastic_loss_history)\nplt.plot(np.arange(num_steps) + 1, LR.stochastic_loss_history, label = \"stochastic gradient\")\n\nLR = LogisticRegression()\nLR.fit(X, y, alpha = .05, max_epochs = 100)\n\nnum_steps = len(LR.loss_history)\nplt.plot(np.arange(num_steps) + 1, LR.loss_history, label = \"gradient\")\n\nxlab = plt.xlabel(\"Iteration number\")\nylab = plt.ylabel(\"Empirical Risk\")\nplt.loglog()\n\nlegend = plt.legend()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Flabbergasted CSCI 0451 Blog",
    "section": "",
    "text": "My Blog post on Auditing Allocative Bias\n\n\n\n\n\n\nMar 24, 2023\n\n\nXianzhi Wang\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nMy blog post on Linear Regression\n\n\n\n\n\n\nMar 20, 2023\n\n\nXianzhi Wang\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nMy blog post on Kernel Logistic Regression\n\n\n\n\n\n\nMar 2, 2023\n\n\nXianzhi Wang\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nimplementing gradient descent\n\n\n\n\n\n\nFeb 24, 2023\n\n\nXianzhi Wang\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nMy first Blog post on Perceptron\n\n\n\n\n\n\nFeb 15, 2023\n\n\nXianzhi Wang\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nAn example blog post illustrating the key techniques you’ll need to demonstrate your learning in CSCI 0451.\n\n\n\n\n\n\nJan 10, 2023\n\n\nPhil Chodrow\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is Xianzhi Wang’s Flabbergasted Blog for CS0451 Machine Learning class."
  }
]